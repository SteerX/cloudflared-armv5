name: Check for Cloudflared Releases and Build Docker Image

on:
  schedule:
    - cron: '0 0 * * *' # This runs the workflow daily at midnight
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: write

jobs:
  check_and_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests

      - name: Check for new cloudflared release
        id: check_release
        run: |
          python - <<EOF
          import requests
          import os
          response = requests.get('https://api.github.com/repos/cloudflare/cloudflared/releases/latest')
          latest_version = response.json()['tag_name']
          with open('latest_version.txt', 'r') as f:
              current_version = f.read().strip()
          if latest_version != current_version:
              with open(os.environ['GITHUB_OUTPUT'], 'a') as gh_out:
                  print(f'new_version={latest_version}', file=gh_out)
          else:
              print('No new version found.')
          EOF

      # Enable QEMU for ARM emulation in Buildx
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.check_release.outputs.new_version
        uses: docker/setup-buildx-action@v3

      - name: Install build tools for Go cross-compilation
        if: steps.check_release.outputs.new_version
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabi curl git tar

      - name: Build Go ARMv5 toolchain (multi-stage bootstrap, auto Go version)
        if: steps.check_release.outputs.new_version
        run: |
          bash build-cloudflared-armv5.sh "${{ steps.check_release.outputs.new_version }}"

      - name: Get Go toolchain tarball name
        if: steps.check_release.outputs.new_version
        id: go_tarball
        run: |
          CLOUDFLARED_REPO_URL="https://github.com/cloudflare/cloudflared.git"
          CLOUDFLARED_TMP_DIR="cloudflared-upstream-tmp"
          GO_MOD_VERSION_LINE=$(grep '^go ' "$CLOUDFLARED_TMP_DIR/go.mod" | awk '{print $2}')
          if [[ "$GO_MOD_VERSION_LINE" =~ ^([0-9]+\.[0-9]+)$ ]]; then
            GO_FULL_VERSION="${BASH_REMATCH[1]}.0"
          elif [[ "$GO_MOD_VERSION_LINE" =~ ^([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            GO_FULL_VERSION="${BASH_REMATCH[1]}"
          else
            echo "Could not parse Go version from cloudflared upstream go.mod"
            exit 1
          fi
          echo "go_toolchain_tarball=go${GO_FULL_VERSION}-armv5.tar.gz" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        if: steps.check_release.outputs.new_version
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        if: steps.check_release.outputs.new_version
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            steerx/cloudflared-armv5:${{ steps.check_release.outputs.new_version }}
            steerx/cloudflared-armv5:latest
          build-args: |
            CLOUDFLARED_VERSION=${{ steps.check_release.outputs.new_version }}
            GO_TOOLCHAIN_TARBALL=${{ steps.go_tarball.outputs.go_toolchain_tarball }}
          platforms: linux/arm/v5

      - name: Update latest_version.txt and push to repo
        if: steps.check_release.outputs.new_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "${{ steps.check_release.outputs.new_version }}" > latest_version.txt
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add latest_version.txt
          git commit -m "ci: update latest_version.txt to ${{ steps.check_release.outputs.new_version }}"
          git push "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" HEAD:${GITHUB_REF}

      - name: Create tag for release
        if: steps.check_release.outputs.new_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if ! git rev-parse ${{ steps.check_release.outputs.new_version }} >/dev/null 2>&1; then
            git tag ${{ steps.check_release.outputs.new_version }}
            git push "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" ${{ steps.check_release.outputs.new_version }}
          else
            echo "Tag ${{ steps.check_release.outputs.new_version }} already exists."
          fi

      - name: Check if release exists
        id: release_check
        if: steps.check_release.outputs.new_version
        run: |
          if gh release view ${{ steps.check_release.outputs.new_version }} >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: steps.check_release.outputs.new_version && steps.release_check.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.check_release.outputs.new_version }}
          name: "cloudflared-armv5 ${{ steps.check_release.outputs.new_version }}"
          body: "Automated release for cloudflared-armv5 version ${{ steps.check_release.outputs.new_version }}"
          draft: false
          prerelease: false

      - name: Prepare source archive
        if: steps.check_release.outputs.new_version
        run: |
          git archive --format=zip --output=cloudflared-armv5-${{ steps.check_release.outputs.new_version }}.zip HEAD

      - name: Upload source archive to release
        if: steps.check_release.outputs.new_version
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.check_release.outputs.new_version }}
          files: cloudflared-armv5-${{ steps.check_release.outputs.new_version }}.zip
          fail_on_unmatched_files: false